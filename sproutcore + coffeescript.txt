Order Of Includes
******************

he build tools replace sc_super()  with
arguments.callee.base.apply(this,arguments)


var newObject = SC.Object.create()
var newSet = SC.Set.create()
var newArray = SC.SparseArray.create()

javascript arrays are sproutcore arrays

-- runtime
Core.js
ObserverSet.js
Observable.js
Enumerator
Enumerable
range_Observer
Array
Comparable
Copyable
delegate_support
Freezable
Set.js
observer_queue.js
Object.js

chain_observer
binding.js
Cookie
Error
Index_set
logger
runloop
selection_set
sparse_array


-- system



/*
 * MyClassA
*/
MyClassA = SC.Object.extend({

	foo: "foo1",

	init: function() {
		arguments.callee.base.apply(this,arguments);
		console.log("inited!");
	},

	bar: function() {
		return "bar";
	},

	myMethod: function() {
		console.log('myMethod1');
	}
});

MyClassA.prototype.foo = "foo1"


/*
 * MyClassB
*/
MyClassB = MyClassA.extend({

	myMethod: function() {
		arguments.callee.base.apply(this,arguments);
		console.log("myMethod2");
	}
});


init doesn't have arguments, pass a hash to create and the properties will be set


	HooKVOTests = SC.Object.extend({

	  showFullName: NO,

	  sendChangesToServer: function(key) {
	  	// ... send changes to the server
	  	alert("This really works");
	  }.observes('showFullName')

	});

	var kvoTest = HooKVOTests.create();
	kvoTest.set('showFullName', YES);

// trigerred when contact changes
user.addObserver("contact", function() {
  console.log('contact did change');
});

// triggered when contact or contact.firstName changes
user.addObserver('contact.firstName', function() {
  console.log('contact.firstName did change');
});


// Try not to use closures for observing.. hurts performance!
user.addObserver('contact.firstName', user, user.contactFirstNameDidChange);
user.addObserver('contact.firstName', user, 'contactFirstNameDidChange');
contact.removeObserver('firstName', contact, 'firstNameDidChange');

contactFirstNameDidChange: function (sender, key) {
}

* Important!
private vars begin with an underscore public ones dont

use contact.get('firstName'); and set only for the public ones

contact.getPath('address.city');
contact.set('firstName', 'John');
contact.setPath('address.city', 'Los Altos');

** Computed Properties **

fullName: function() {
  return this.get('firstName') + " " + this.get('lastName');
}.property()

** dependant keys **
fullName: function() {
  return this.get('firstName') + ' ' + this.get('lastName');
}.property('firstName', 'lastName')

// you can cache these computed properties.. worth it?


.cacheable()


eek! destroy()

Instead, if you want to check than a value is null or undefined use SC.none()
If you want to check that a value is null, undefined, or an empty string use SC.empty()


invokeOnce() will make sure something only happens once at the end of the current runloop

Use invokeLater() instead of setTimeout()



// SPROUTCORE 2

sc_assert('must pass a valid object', !!obj);

newOb = SC.create( ob, params )

if( SC.none( anItem ) ) {
}


forEach( callback, target )
map
filter
find
findProperty
reduce
invoke
     if (people.every(isEngineer)) { Paychecks.addBigBonus(); }

when manually catching events i think i need to run the run loop

try using sproutcores event handling - setupHandler('mousedown', 'mouseDown');


// COFFESCRIPT

you never need to write var


# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if flag

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Existence:
alert "I knew it!" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)

console.log sys.inspect object → console.log(sys.inspect(object));

# default args
fill = (container, liquid = "coffee") ->
  "Filling the #{container} with #{liquid}..."

if happy and knowsIt
  clapsHands()
  chaChaCha()
else
  showIt()

  eat food for food in ['toast', 'cheese', 'wine']


  only the while loop

For single-line statements, unless can be used as the inverse of if.

As a shortcut for this.property, you can use @property.

You can use in to test for array presence, and of to test for JavaScript object-key presence.

CoffeeScript	JavaScript
is	===
isnt	!==
not	!
and	&&
or	||
true, yes, on	true
false, no, off	false
@, this	this
of	in
in	no JS equivalent

solipsism = true if mind? and not world?

speed ?= 75

footprints = yeti ? "bear"


// FAT ARROW SWIZZLES THE VALUE OF THIS TO BE CORRECT
  $('.shopping_cart').bind 'click', (event) =>
    @customer.purchase @cart


healthy = 200 > cholesterol > 60

sentence = "#{ 22 / 7 } is a decent approximation of π"


Hndlebars template are strings of nordmal html that have to be compiled then you can use them in your views
The view has the properties that the template displays.

ie. for this template:-

My new car is {{color}}.

The view must have a property 'color'. When the property changes - the display changes

You make a hierarchy of views - each view needs a template


http://www.handlebarsjs.com/

// TODO!
• SCViews automatically get mouseevemnts
• can we make our stuff a view?

// for events that sproutcore doesn't listen for you must start and end your own runloop
$('my-input').on('copy', function() {
	SC.RunLoop.begin(); ... SC.RunLoop.end()})`. !deprecated `#js:SC.run.begin()`

using SC.Request ensures that a Run Loop is triggered when the browser receives a response from the server, and using SC.Timer ensures that a Run Loop is triggered when the timer expires.

runloop functions -
- end
• invokeLater
• invokeOnce
• changes to bound properties
• invokeLast

SC.run.next ?

willInsertElement:
 didInsertElement: function() {
    this._super();
    this.$("p:even").addClass("even");
  }

  and tear doen - useful for hooking up stuff


SPROUTCORE 2
------------

You can set the root element. in sproutcore 1 it was always body. Then sproutcore wont hijack all events for the page, only for the element you specify.

!! SHIT SHIT SHIT. does this mean my stuff wont work with other stuff on the page? !!

Computed properties with dependant keys are !important. The key to clean binding and good MVC

WOW - TEMPLATES http://guides.sproutcore.com/using_handlebars.html
---------------

-- bindAttr is good for styling
you also have, {{#with}}
{{#unless hasPaid}}{{/unless}}
{{#if person}}{{else}}{{/if}}
class is different, only adds the dasherized version if that property is true <div {{bindAttr class="isUrgent priority"}}> would add class is-urgent only when isUrgent is true

localised strings!
{{loc myLocalizedString}}
add a subview! {{view App.InfoView}}

template = SC.Handlebars.compile( "<div {{bindAttr class=\"normalClass\"}} style='font-size:16px; background-color:orange'>{{firstBindingTest}}<div>" )

	remainingString: (() ->
		remaining = @get('remaining')
		return remaining + ( remaining==1 ? " item" : " items" )
	).property('remaining').cacheable()	# property remaining string depends on remaining

{{#collection}} supports select/option tags (thanks Trek!)
SC.Button supports the type attribute (thanks Erik!)
SC.Views support attribute bindings
SC.View now defers rendering until after bindings have finished syncing
Applications can specify custom events to dispatch to views

// you can set the binding variable from a template like this
// you can actually set any variable this way, but maybe you should make a subclass ?
{{#view ABoo.MockViewTest counterBinding="ABoo.#{_.varName}.counterString"}}



!!!!!!!
// To include a template in the javascript..

ABoo.MockViewTest2 = SC.View.extend({
	// we didnt really need the subclass. Could setup the binding here if we wanted.
	defaultTemplate: SC.Handlebars.compile('<label><input type="checkbox" {{bindAttr checked="value"}}>{{title}}</label>'),
	title: "Hiya"
	// attribute bindings can go here!
});

var comeonReallyDidYouExpectThisToWork = ABoo.MockViewTest2.create();
comeonReallyDidYouExpectThisToWork.appendTo(this.div$);



// jquery animation test
jQuery(this).animate({sliderValue: 50},
{
	duration: 10000,
	step: function(now, fx) {
		console.log("Anim: "+fx.elem.id + ' ' + fx.prop + ': ' + now);
	}
});


// Reeallly confused about class methods!

ABoo.HooCanvasClassMethods = SC.Mixin.create({
})

// OR ?

ABoo.HooCanvasClassMethods = {
}

SC.mixin( ABoo.HooCanvas, ABoo.HooCanvasClassMethods );



MOUSEEVENTS
  /** @private */
  _bubbleEvent: function(view, evt, eventName) {
    var result = true, handler,
        self = this;

      SC.run(function() {
      	//console.log(eventName);
      	if(view[eventName]){ // mousedown, etc
        	handler = view[eventName];
        	if (SC.typeOf(handler) === 'function') {
          	result = handler.call(view, evt);
        	}
        }
      });



All SproutCore objects have either an isClass or isInstance property, describing whether the object is a class or an instance.

** NEW **
SC.addObserver(observedObject, 'foo', observerObject, observerObject.fooDidChange, "extra data");

SC.run(myObject, myObject.doRuntimeStuff, "extra", "data");


** Debugging handlebars **

{{log path.to.property}}
{{debugger}}
