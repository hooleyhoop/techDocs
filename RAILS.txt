RAILS
-----
http://articles.sitepoint.com/article/learn-ruby-on-rails
http://articles.sitepoint.com/article/rails-for-beginners/3

// crete a project   Rails 2
$ sudo rails demo
$ cd demo
$ sudo rake db:migrate    	-- create empty database
$ sudo script/generate rspec	-- create files needed for testing
$ ruby script/server
$ ruby script/console

// Create a project Rails 3
$ sudo rails new first_app
$ cd first_app/
$ mate Gemfile            // setup dependencies
$ sudo bundle install     // install dependencies
$ rails server            // run app
$ git init
$ git add .

$ heroku open

http://localhost:3000

// Lets create The Users resource
$ rails generate scaffold User name:string email:string 		// as id field is implicit
$ rake db:migrate
$ rails s														// shortcut for $rails server

// show rake db tasks
$ rake -T db

// show all rake Tasks
$ rake -T

$ rails generate scaffold Micropost content:string user_id:integer
$ rake db:migrate

$ rails console
first_user = User.first
first_user.microposts

$ git push heroku master
$ heroku rake db:migrate

// Optionally push our database content
$ [sudo] gem install taps
$ heroku db:push

http://railstutorial.org/chapters/static-pages#top

$ bundle install
$ rails generate rspec:install

gem 'jquery-rails'
$ rails generate jquery:install

// lets do some work on a new branch
git checkout -b static-pages

$ rails generate controller StaticPages home contact


  describe "GET 'home'" do						#just a label
    it "should be successful" do			#just another label!
      get 'home'											#get home
      response.should be_success			#server response should be http 200
    end
  end


// I think you need to have spork running in another terminal window
$ spork (cd to our project first, obviously)

then

$ rspec spec/
$ rspec spec/controllers/
$ rspec spec/controllers/pages_controller_spec.rb

OR

$ autotest

$ rails console

$ rails generate integration_test layout_links

ROUTE STATIC PAGES
match '/contact', :to => 'static_pages#contact'

gives us magically

about_path => '/about'
about_url  => 'http://localhost:3000/about'
root_path => '/'
root_url  => 'http://localhost:3000/'



¥ http://railstutorial.org/chapters/modeling-and-viewing-users-one#top

$ rails generate model User name:string email:string
$ rake db:migrate


$ rails console --sandbox
$ tail -f log/development.log

>> user = User.new(:name => "Michael Hartl", :email => "mhartl@example.com")
>> user.save
>> user
>> user.name
>> user.email

>> user = User.create(:name => "A Nother", :email => "another@example.org") // equivalent to new + save
>> user.destroy

-- ACTIVE RECORD --
-------------------

>> User.find(1)
>> User.find_by_email("mhartl@example.com")
>> User.first
>> User.all

>> user.email = "mhartl@example.net"
>> user.save

>> user.update_attributes(:name => "The Dude", :email => "dude@abides.org")	// equivalent to set + save. Must have used attr_accessible

// make sure test database is uptodate with development datatbase
$ rake db:test:prepare



class User < ActiveRecord::Base
  attr_accessible(:name, :email)
  validates(:name, :presence => true)
end

$ rails console --sandbox
>> user = User.new(:name => "", :email => "mhartl@example.com")
>> user.save
=> false
>> user.valid?
=> false
>> user.errors.full_messages


// create bang! wtf?
  it "should create a new instance given valid attributes" do
    User.create!(@attr)
  end

(We use the noisy method create!, first seen in Listing 6.10, so that it will raise an exception if anything goes wrong. Using create, without the bang !, risks having a silent error in our test, a potential source of elusive bugs.

If you need to look up a user by email you need to index by email
$ rails generate migration add_email_uniqueness_index
$ rake db:migrate

# run our custom rake task to generate some data
$ rake db:populate

// virtual password property on model - not stored in database
attr_accessor :password


$ rails console --sandbox
>> user = User.new
>> user.respond_to?(:password)
=> true
>> user.respond_to?(:encrypted_password)
=> false

$ rails generate migration add_password_to_users encrypted_password:string

-----------------------------------
----------- old version -----------

Model (ActiveRecord )
View ( ActionView )
Controller ( ActionController )

 The controllers subdirectory is where Rails looks to find controller classes. A controller handles a web request from the user.

 The views subdirectory holds the display templates to fill in with data from our application, convert to HTML, and return to the user's browser.

 The models subdirectory holds the classes that model and wrap the data stored in our application's database. In most frameworks, this part of the application can grow pretty messy, tedious, verbose, and error-prone. Rails makes it dead simple.

 The helpers subdirectory holds any helper classes used to assist the model, view, and controller classes. This helps to keep the model, view, and controller code small, focused, and uncluttered.

Need 3 databases
----------------
 library_development
 library_production
 library_test

database.yml

$ rake -T db  -- see all available Rake Tasks

'Story' objects are in 'stories' table
'Story.title' is a column in that table

// open a rails console so we can control and inspect our App
$ cd demo
$ ruby script/console

/* Static Pages */
-----------------------------------
http://localhost:3000/index.html

is in
/public/index.html

put your own static pages in public

/* Dynamic Pages */
-----------------------------------

Rails actions, which are a more powerful way to define URLs than static files.
Rails actions come bundled together inside controllers.

by default..
http://localhost:3000/controller/action

so
$ sudo script/generate controller Pages home contact	-- Pages controller, home & contact are optional actions

http://localhost:3000/pages/home
http://localhost:3000/pages/contact


/* Run Tests */
-----------------------------------

$ sudo script/generate rspec_controller Pages home contact

$ spec spec/
$ spec spec/controllers/
$ spec spec/controllers/pages_controller_spec.rb

$ /Users/shooley/Sites/rails/static/script/autospec


tail -f log/development.log


TEstting conrollers will need instances of model objects with pre defined values - Use factories





Rails
------
$ cd ~/rails_projects
$ rails new demo_app -T		// -T dont add default Raisls test dir
$ cd demo_app

$ rails generate controller Pages home contact
$ rails generate integration_test layout_links
$ rails generate model User name:string email:string
$ rails generate model Relationship follower_id:integer followed_id:integer

$ annotate
$ rails server --environment production
$ rails console

rspec
------
$ rails generate rspec:install
$ rspec spec/
$ rspec spec/controllers/
$ rspec spec/controllers/pages_controller_spec.rb


Bundle
------
$ bundle install

Git
------
$ git init
$ git add .
$ git commit -m "Initial commit"
$ git remote add origin git@github.com:<username>/demo_app.git
$ git push origin master
$ git push heroku

$ git checkout -b static-pages	// out

$ git checkout master
$ git merge static-pages				// In

Rake
------
$ rake -T db		// see all database tasks
$ rake -T				// see all rake tasks
$ rake db:migrate
$ rake db:rollback
$ rake db:test:prepare
$ rake db:migrate RAILS_ENV=production
$ rake db:reset
$ rake db:populate	// fill with faker data

heroku
------
$ [sudo] gem install heroku
$ heroku keys:add
$ heroku create

$ git push heroku master
$ heroku rake db:migrate
$ heroku open							// launch in browser

$ heroku rename railstutorial

$ [sudo] gem install taps	// optionally push your db data to heroku
$ heroku db:pu

$ git push heroku

REST - see http://guides.rubyonrails.org/routing.html
------
Created
Read
Updated
Deleted

-- Routes
resources :microposts 	// quickly declare all of the common routes for a given resourceful controller, eg  index, show, new, edit, create, update and destroy actions


GET			/microposts					index			page to list all microposts
GET			/microposts/1				show			page to show micropost with id 1
GET			/microposts/new			new				page to make a new micropost
POST		/microposts					create		create a new micropost
GET			/microposts/1/edit	edit			page to edit micropost with id 1
PUT			/microposts/1				update		update micropost with id 1
DELETE	/microposts/1				destroy		delete micropost with id 1

microposts_path 		returns /microposts
new_photo_path 			returns /microposts/new
edit_photo_path			returns /microposts/edit
micropost_path(id)	returns /microposts/:id (for instance, photo_path(10) returns /microposts/10)

Each of these helpers has a corresponding _url helper (such as microposts_url)

- singular
match "profile" => "users#show"		// /profile rather than /profile/:id


resource :geocoder
GET			/geocoder/new			new					return an HTML form for creating the geocoder
POST		/geocoder					create			create the new geocoder
GET			/geocoder					show				display the one and only geocoder resource
GET			/geocoder/edit		edit				return an HTML form for editing the geocoder
PUT			/geocoder					update			update the one and only geocoder resource
DELETE	/geocoder					destroy			delete the geocoder resource

new_geocoder_path 		returns /geocoder/new
edit_geocoder_path 		returns /geocoder/edit
geocoder_path 				returns /geocoder

As with plural resources, the same helpers ending in _url will also include the host, port and path prefix.

- Namespaces
namespace "admin" do
  resources :posts, :comments
end

GET			/admin/photos						index			admin_photos_path
GET			/admin/photos/new				new	 			new_admin_photos_path
POST		/admin/photos						create		admin_photos_path
GET			/admin/photos/1					show	 		admin_photo_path(id)
GET			/admin/photos/1/edit		edit	 		edit_admin_photo_path(id)
PUT			/admin/photos/1					update	 	admin_photo_path(id)
DELETE	/admin/photos/1					destroy	 	admin_photo_path(id)

If you want to route /photos (without the prefix /admin) to Admin::PostsController, you could use

scope :module => "admin" do
  resources :posts, :comments
end

or, for a single case

resources :posts, :module => "admin"

If you want to route /admin/photos to PostsController (without the Admin:: module prefix), you could use

scope "/admin" do
  resources :posts, :comments
end

or, for a single case

resources :posts, :path => "/admin"

- Nested resources
------------------

if you had these models:-
class Magazine < ActiveRecord::Base
  has_many :ads
end

class Ad < ActiveRecord::Base
  belongs_to :magazine
end

you could have the routing:-
resources :magazines do
  resources :ads
end

GET			/magazines/1/ads					index				display a list of all ads for a specific magazine
GET			/magazines/1/ads/new			new					return an HTML form for creating a new ad belonging to a specific magazine
POST		/magazines/1/ads					create			create a new ad belonging to a specific magazine
GET			/magazines/1/ads/1				show				display a specific ad belonging to a specific magazine
GET			/magazines/1/ads/1/edit		edit				return an HTML form for editing an ad belonging to a specific magazine
PUT			/magazines/1/ads/1				update			update a specific ad belonging to a specific magazine
DELETE	/magazines/1/ads/1				destroy			delete a specific ad belonging to a specific magazine

magazine_ads_url(@magazine)
edit_magazine_ad_path(@magazine)

** Resources should never be nested more than 1 level deep **

these do the same thing
<%= link_to "Ad details", magazine_ad_path(@magazine, @ad) %>
<%= link_to "Ad details", url_for(@magazine, @ad) %>
<%= link_to "Ad details", [@magazine, @ad] %>
<%= link_to "Magazine details", @magazine %>

You are not limited to the seven routes that RESTful routing creates by default
resources :photos do
  member do
    get 'preview'
  end
end

This will recognize /photos/1/preview with GET, and route to the preview action of PhotosController. It will also create the preview_photo_url and preview_photo_path helpers.

Old style Non-Resourceful Routes - ie arbitrary routes
--------------------------------


  match '/contact', :to => 'pages#contact'
  match '/about',   :to => 'pages#about'
  match '/help',    :to => 'pages#help'




class Micropost < ActiveRecord::Base
  attr_accessible :content

  belongs_to :user
end

class User < ActiveRecord::Base
  attr_accessor :password
  attr_accessible :name, :email, :password, :password_confirmation

  has_many :microposts
end


micropost.user								Return the User object associated with the micropost.
user.microposts								Return an array of the userÕs microposts.
user.microposts.create(arg)		Create a micropost (user_id = user.id).
user.microposts.create!(arg)	Create a micropost (exception on failure).
user.microposts.build(arg)		Return a new Micropost object (user_id = user.id).
self.inspect
self.to_yaml
debug self
self.methods
self.instance_variable_names

Single Table Inheritance
-------------------------

You can have 1 table for User , then different subclasses of users - eg, Admin, Temporary, Super, all in the same table


DO NOT PUT CODE IN THE VIEW
---------------------------

That is what helpers are for

BlogController will get a helper module called BlogHelper in the file blog_helper.rb

eg, <h3><%= @page_title || "Pragmatic Store" %></h3>

module BlogHelper
	def page_title
		@page_title || "Pragmatic Store"
end

now looks like >   <h3><%= page_title %></h3>

1)You have a global helper application_helper.rb
2)You can import a different helper > 	helper date_helper
3)You can include a Class as a helper	> helper DateFormat

- render partial as string -
		partialAsString = render_to_string :partial =>"test_partial"
		render :text => partialAsString

render :js => "alert("fuck");"


.. get some ajax ..

	function testLoadSomeHTMLByAjax() {
		$.ajax({
			url: '/pages/_ajaxHTML',
			data:{"urlpath":"hello steven"},
			success: function(data,textStatus,xmlhttprequestobject) {
					$(data).appendTo($('#resizable'));
				},
			dataType:"html"
		});
	}


// Check out Haml Docs
http://haml-lang.com/docs/yardoc/Haml/Engine.html

// I can render some haml from a string!!
haml_string = "%p Haml-tastic!"
engine = Haml::Engine.new(haml_string)
hamlResult = engine.render
render :text => hamlResult

/* Partial Law */

/
	render blueView partial 3 times with each view
	because 'views' is a pluralised collection the partial will be rendered views.length times
	and each have a variable 'blueView' (name of the partial) which is the item from the the collection

= render :partial=>"blueView", :object=>@window.views


remember - render partial with layout wraps the partial in the layout
ie partial goes where yield is in layout


THIS IS IMPORTANT
# You can also apply a layout to a block within any template:
#
   <%# app/views/users/_chief.html.erb &>
   <%= render(:layout => "administrator", :locals => { :user => chief }) do %>
     Title: <%= chief.title %>
   <% end %>

 ...this will return:

   <div id="administrator">
     Budget: $<%= user.budget %>
     Title: <%= chief.name %>
   </div>

** Soooooo, contents of block get inserted where the yield is in the template **
** the layout shares the locals
* if you pass arguments to the yield they will be passed to the block

i dont get this

  # You can also yield multiple times in one layout and use block arguments to differentiate the sections.

     <%# app/views/users/index.html.erb &>
     <%= render :layout=>@users do |user, section| %>		// wrap this block in the layout
       <%- case section when :header -%>
         Title: <%= user.title %>
       <%- when :footer -%>
         Deadline: <%= user.deadline %>
       <%- end -%>
     <% end %>

     <%# app/views/users/_user.html.erb &>
     <div class="user">
       <%= yield user, :header %>
       Budget: $<%= user.budget %>
       <%= yield user, :footer %>
     </div>

So the layout is a way to wrap content and compose

  go to the source
  http://github.com/rails/rails/blob/ab7830d66cf69316142a6cda847756faa73f8cd5/actionpack/lib/action_view/render/partials.rb


    <head>
  <%= yield :head %>
  </head>


  <% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>



LOGGING
(*********

    logger.info( GUI::HooLoremIpsumView.name )

 RAILS_DEFAULT_LOGGER.info self.window


FUNKY METHOD CALLING
**********
def myFunc( *arg )
  #arg is an array
end
myFunc( one, two, three );

def myFunc( arg )
  #arg is an hash
end
myFunc( :val1=>one, :val2=>two, :val3=>three ) is equivalent to myFunc( {:val1=>one, :val2=>two, :val3=>three} )




SPECCING THE MODEL
$ ./script/generate rspec_model User					// Old way?

$ rails generate controller Users new					// NB USERS is plural
$ rails generate model User name:string email:string	// User is singular

// is this not the preferred way?
$ rails generate scaffold User name:string email:string	// make a new resource


// Example - make a new elephant
$ rails generate controller Elephants new				// adds the route /elephants/new
$ rails generate model Elephant name:string email:string
$ rake db:migrate
$ annotate												// requires gem 'annotate-models', '1.0.4'
important! add to model
attr_accessible :name, :email
$ tail -f log/development.log
$ rails console --sandbox								// start without sandbox if you want to add an elephant into the development database
$ elephant = Elephant.new
$ elephant.save
$ Elephant.create										// equivalent to new and save
$ Elephant.create!(:name => "Michael Hartl", :email => "mhartl@example.com")
-- add to routes: resources :elephants

context "A user (in general)" do
  setup do
    @user = User.new
  end

  specify "must have a username" do

  end
end


ThatÕs not bad, but it could be better. WeÕve expressed a requirement in our code but we havenÕt said anything about the behaviour of a User object. What about this instead:

context "A user (in general)" do
  setup do
    @user = User.new
  end

  specify "should be invalid without a username" do

  end
end


ThatÕs better. Not only have we expressed that our user must have a username, but weÕve also expressed what behaviour should be expected from the User model if it doesnÕt have one; it should be invalid.


context "A user (in general)" do
  setup do
    @user = User.new
  end

  specify "should be invalid without a username" do
    @user.should_not_be_valid
    @user.username = 'someusername'
    @user.should_be_valid
  end
end




**** FUUUuuuuuuuuuuu!!!!!
An object and a hash can be used interchangebaly if the object has properties the same as the hash
ie if you have an object with property name you can treat it as a hash and do

puts myOb['name']

listView.content = [
{ 'BooTitle'=> "A lovely day",          'BooLocation'=> "Glengarry Glenross, Perthshire" },
{ 'BooTitle'=> "way home boo",          'BooLocation'=> "Southwark, London, UK" },
{ 'BooTitle'=> "tipsy topsy turvey",    'BooLocation'=> "New York, New York" },
{ 'BooTitle'=> "The Shadow strikes",    'BooLocation'=> "Blackburn, lancashire" },
{ 'BooTitle'=> "saturday morning boo",  'BooLocation'=> "Dark side of the moon" }
];

listView.content = [
Elephant.new({:name=>"steve", :email=>"a@yahoo.com"}) ,
Elephant.new({:name=>"M knight shamalam", :email=>"a@yahoo.com"}) ,
Elephant.new({:name=>"country jo", :email=>"a@yahoo.com"}) ,
Elephant.new({:name=>"doc beat", :email=>"a@yahoo.com"})
];


open /Users/shooley/.rvm/gems/ruby-1.9.2-p0/gems/rspec-core-2.0.0.beta.22

COVERAGE----
------------
------------

$ rake -T			# see all options
$ rake spec:rcov


WE NEED TO CHECK OUT LOCAL ASSIGNS

  <% if local_assigns[:show_call_out] %>
    <em><%= format @article.call_out %></em>
  <% end %>






Documenting making a plugin
----------------------------
http://www.themodestrubyist.com/2010/03/05/rails-3-plugins---part-2---writing-an-engine/


¥ in the gui dir

>> sudo gem install jeweler
>> rake gemspec
>> rake build
>> rake install (you have now installed your engine as a gem locally)

[ At this point if you wanted your demo app to use your installed gem, edit the Gemfile in your demo app and remove the 'path' option from your gem line. It should look like this: ] gem ÔcheeseÕ
>> rake gemcutter:release (this pushes your gem up to Gemcutter, a public gem repository)


>> gem uninstall gui			// uninstall
>> rake test (this will initialize your test database and run the basic test suite)

