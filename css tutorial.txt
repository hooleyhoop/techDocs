img is inline so you get extra padding at the bottom - try making it inline-block or block

if you want to set a width on a block item consider making it inline-block

// http://www.vision.to/articles/the-difference-between-the-flow-and-positioning-for-web-pages.php

All block elements are by default just as wide as the container surrounding them, and they always stack up vertically, one atop another, unless you alter the arrangement by forcing them out of their normal locations via relative shifting or negative margining.
block elements stack vertically
This remains true even if their widths are made less than the natural width of their containing element

Tables are an exception tho, in that they do stack vertically but don't automatically widen to fill a containing element
Tables are an exception tho, in that they do stack vertically but don't automatically widen to fill a containing element. Instead they "shrink-to-fit" around their internal content, so if you want them to act like other block elements you must assign them a width of 100%. Be careful tho, because in that case any side borders or paddings will be added to that 100% width, unlike natural block elements which have a default width of "auto".

Inline elements stack sideways, starting from the left and extending to the right as each new inline element is read by the browser.
When a browser runs out of inline elements for a given line, or when it needs to make a new line, the heights of all the elements in the line being formed are measured. Then a "line box" is created that is the same height as the tallest measured element, and the line box is wrapped around them all. This line box is never visible, but you may get an idea of where it is by applying a background-color to a span element that wraps a set of inline elements.
Each time the browser creates a line box it is added below the previous one, so line boxes behave much like block elements, altho some of the properies governing them are different. For instance, a text character in a line box does not sit on the bottom of the line box, but instead on something called the baseline which is usually a few pixels above the bottom of the line box. This way characters with "descenders" (like the hook on the bottom of a small "g") have room for those descenders to hang down while allowing the main bodies of the characters to remain aligned.

You cannot specifically create a line box; they are strictly for use by the browser in organizing groups of inline elements. Also, line boxes will always be the full width of whatever container they occupy, even when they hold only one character. There can never be two separate line boxes of different heights side-by-side.

Block elements may contain both inline elements and other block elements, but inline elements may contain only other inline elements. It's illegal to place a block element inside an inline element like this ie div in span

CSS features a property called display, which allows you to change a block element into an inline one and vice versa. This can be very useful, but be aware that while making a paragraph inline does cause it to act like a span, it doesn't make it legal to place that paragraph inside a span!

Block boxes are always rectangles and can be given widths and heights, but inline elements ignore those properties, since they must occupy an unknown set of line boxes. Both block and inline elements can have padding and margins, but using these on inline elements might show inconsistent results across browsers, and in any case only the side paddings and margins are obeyed for inline elements.

If you think about it you will see why this must be so. If a span did obey vertical paddings for instance, then the lines above and below would be pushed away. When the specs were made it was decided that this was not desirable, thus top and bottom paddings and margins are ignored for inline elements, as shown in the two live demos with the colored borders. The word "paddings" above has been wrapped in a span that has a red border and 2em of padding, and the word "margins" has similar margins and a green border. You can see how only the side paddings and margins are obeyed, while the vertical ones are ignored.

To repeat, absolutely positioned elements are not part of any flow. Instead, an AP element is always located in reference to some parent element using horizontal and vertical coordinates

But which parent? If the AP element's direct parent is not itself "positioned" (meaning any position other than static) then the inner AP element does not use that direct parent as its base of reference. Instead it will look further out until it finds an "ancestor" that is positioned and uses that as its base. If no such positioned ancestor exist, the HTML element is the default positioned parent.

There is one exception to the "positioned parent" rule, and that is when the horizontal or vertical positioning properties are allowed to remain at the default "auto" value. If both the left and right properties are auto, the AP element will locate itself horizontally as if it were a static element. Thus if a static flowed box were normally displayed halfway across the page width, an AP box with side auto values and the same source location would also display at that page location. This does not mean that the AP element is now in the flow; it's still on its own separate layer. Only its displayed location is controlled by the flow. Any flowed elements that follow it will display without noticing the presence of the AP element, and they can sometimes be covered by that AP element. The same thing applies to AP elements with auto top and bottom values, but vertically rather horizontally.
I call this effect "auto positioning" but it really just means absolute positioning that is controlled by the flow via auto side values. It's a bit tricky and will be covered in a later article. To avoid the issue just be sure to always use at least two side positional vaues (preferably left and top) when placing AP elements

Relatively positioned elements have another function besides being able to shift around, and that is to serve as a "positioned base" for AP elements. See what this means? Relative elements do participate in the flow, yet they may also provide a positioned base that AP children can use to calculate their own locations. That's why it's called "relative positioning," because those elements relate and join the world of the flow to the world of absolute positioning.

TO SUMMERIZE
------------

• ELEMENTS ARE IN THE FLOW (relative or default)
• NOT IN THE FLOW - ABSOLUTELY POSITIONED
• AUTO POSITIONED - NOT IN THE FLOW, BUT POSITIONED BY TH FLOW - (Following elements wont notice it)
• POSITIONED ABSOLUTELY TO A RELATIVE ITEM (IE NOT IN, BUT LINKED TO THE FLOW a relative layer is the link between an item in the flow and an absolutely positioned)

A lot of Internet Explorer's rendering inconsistencies can be fixed by giving an element “layout.”
In “non-layout” elements, hasLayout is not triggered, i.e. a pure div without a dimension can be a “non-layout ancestor”.

AUTO POSITIONING CONTINUED
--------------------------

If the auto position is where we want it to be everything is hunky-dory. If not
YOU CANT ADD A DIMENSION OR POSITION because then it wont be auto positioned
...but you can tweak the position by using margins.

The specs say that margins work on all AP elements and never collapse with other margins, greatly simplifying the situation.
(AP elements are not in the flow so margins cannot collapse)
YOU can only apply a left margin if left:0, similarly for top mrgin to be seen top must be top:0
AN AUTO POSITIONED ELEMENT is considered to be set top and left

dt:nth-of-type(1) { background: #b44835; }
dd:nth-of-type(1) { background: #b44835; }

// select any list item anywhere under a list
ul li { margin: 0 0 5px 0; }

// select list items 1 level under a list only
ul > li { margin: 0 0 5px 0; }

/* Selects an unordered list that directly follows the element with ID title */
#title + ul { margin-top: 0; }


css moves right to left. Rightmost is called the key selector

.editor_button img { // gets all images, selects those that are inside an element with class .editor_button

IE BOX FIX
.box
{
width: 75px;
height: 35px;
}

html<body .box
{
width: auto;
height: auto;
min-width: 75px;
min-height: 35px;
}


• (static) Normal flow includes block formatting of block boxes, inline formatting of inline boxes, relative positioning of block or inline boxes, and positioning of run-in boxes.

• Floats. In the float model, a box is first laid out according to the normal flow, then taken out of the flow and shifted to the left or right as far as possible. Content may flow along the side of a float.

• Absolute positioning. In the absolute positioning model, a box is removed from the normal flow entirely (it has no impact on later siblings) and assigned a position with respect to a containing block.


ONLY BLOCK ITEMS COLLAPSE MARGINS

to put things in a row.. just float them all left

careful! if no height is specified everyhting is overflow? right? careful with overflow hidden

// webkit box stuff is the wbest stuff ever
-webkit-box-sizing = "border-box"
display: -webkit-box
// -webkit-box-orient: horizontal
//-webkit-box-align: stretch
-webkit-box-flex: 1



check out the structural pseudo elements
http://help.dottoro.com/lcmdfspk.php

  width: -webkit-calc(100%/2)


    h4
      font-size: 12px
      color: #006cb5
      + p // a paragraph that follows a h4
        margin-top: 1em


An absolute positioned div inside a relative positioned one can basically be placed anywhere you want inside the parent div. So we’ll just use this setup and absolute position a div with bottom:0 within a relative positioned one. The relative positioned div inherits its height from its parent.


Block elements have width and height
Inline elements are the size of their contents
Inline-Block elements are both inline and can have width & height

check out word-wrap, multi columns and box sizing

-- oocss --

// class "mod" with 4 properties
<div class=”mod”>
        <div class=”inner”>
                <div class=”hd”>Block Head</div>
                <div class=”bd”>Block Body</div>
                <div class=”ft”>Block Foot</div>
        </div>
</div>
-- oocss --



Block-level elements, by default, take up the entire width of their containing element and the height of the default line-height. <div>, <pre>, <p>, <ul>, <ol>, <li>, etc

Inline elements are, just as their name implies, in-line. They will stack up next to each other, left-to-right Given no content, they will collapse down and have no width or height. Some in-line elements are: <img>, <em>, <strong>, <a>, <span>, etc.

A float will place an element outside the normal flow of elements and moves the element right or left until it reaches the margin or padding of another block-level element.

Applying float to an element will automatically make it a block-level element. ) Giving an element both float:left; and display:block; is redundant and unnecessary

lso, using display:inline on a floated image is actually a very popular method of fixing many cross-browser quirks.

Floating a div to clear a div is one of those things you stumble upon with some experimenting and frustration. What basically happens is that you can apply a float to a parent element that contains other floated elements and they will all equalize and clear properly:

<!--[if lte IE 7]>
Target all versions of IE that are less than or equal to "7"
load a specific css here to deal with ie6
<![endif]-->

Many-a-times when I’ve encountered a serious layout issue, a simple application of overflow:hidden on the offensive div would solve the problem.

“You should always set a width on floated items (except if applied directly to an image – which has implicit width). If no width is set, the results can be unpredictable.”

// fixes ie6 woes
body { zoom:1; }

a div containing floats will not have the corrct size unless you do
div.container {
	border: 1px solid #000000;
	overflow: auto;
	width: 100%
}

// Pseudo-elements
first-line:
first-letter:
before:
after: // not ie?

p:first-line {text-transform: uppercase; }


p.imgCap_number:before {
	padding-right: 0.3em;
	font-family: Wingdings;
	content: "(";
}
p.imgCap_number:after {
	font-style: italic;
	content: " and some text after.";
}


// attribute selectors
-- --

// wow, you can style something depending that it follows

h1 {color: black; font-size: 16pt; }
h1 + p {color: blue; font-size: 14pt;}
p {color: red; font-size: 12pt; }
h1 + p + p {color: green;}


Margins ans stuff collapse on some elements but not if you have borders or padding.
only stuff in the flow?

Elements where margins do not collapse
--------------------------------------
• floated elements
• absolutely positioned elements
• inline-block elements
• elements with overflow set to anything other than visible (They do not collapse margins with their children.)
• cleared elements (They do not collapse their top margins with their parent block’s bottom margin.)
• the root element

SOO, a block is normally full width right? if you take it out of the flow it will be the width of its contents



Define the same element multiple times eg

style.css
----------
h1 {}

colour.css
----------
h1 { color:ff; }

sidebar.css
-----------
#sidebar h1 { color:00ff;}


• YOU CAN POSITION SOMETHING ABSOLSUTE ie position:absolute; top: -100px; relative to it's enclosing DIV!!!!!

So we can assign multiple class names to a single element?
That means we can change the style sheet so it looks like this:

<div class="boxOut oddBoxOut">

.oddBoxOut,
.evenBoxOut {
  width: 12em;
  padding: 0.5em;
  margin: 0.5em;
  border: solid 1px black;
}

.oddBoxOut {
  float: left;
}

.evenBoxOut {
  float: right;
}


// Object Orientated

.product .price {
      font-size:24px;
      color:red;
      font-weight:bold;
      text-align:right;
}


<div class="product">Hello</div>
	<h1 class="product">Hello</h1>

// To only match the div you would do:
div.product {
    bla bla bla ....
}


.product h1 {
....  						any h1 elements inside the product object should have these properties.
}
.product .price {
....							any price objects inside the product object should have these properties.
}


.borderradius.rgba.boxshadow		any element with class borderradius && rgba && boxshadow
	.hoo_sliding_doors_panel, .hoo_sliding_doors_panel.panel_style_inner
		border: none
		-webkit-box-shadow: rgba(0,0,0,0.05) 1px 2px 2px
		-moz-box-shadow: rgba(0,0,0,0.05) 1px 2px 2px
		box-shadow: rgba(0,0,0,0.05) 1px 2px 2px




over-declared
-------------

For instance, let’s say you have a div that contains some other tags — h1, maybe a few customized anchor tags, etc. Some might say:

<div id="stuff"><h1 class="red">Big Title<h1></div>

#stuff { padding: 20px; border: 1px solid #000; }
h1.big { color: red; }

Let’s do this with less code by stripping out the class="red" declaration

<div id="stuff"><h1>Big Title<h1><div>
#stuff h1 { color: red; }


// This is useful for some stuff… when clearing floating elements or something…
overflow:auto;





A simple selector, as you may recall, is made up by the following components:

1	•	a type selector, or an implicit or explicit universal selector
(h1, p, a)

2	•	an optional ID selector
#mynav - (this is really *#mynav - * is the universal selector)
This can only match at most 1 item as id's should be unique

3	•	zero or more class selectors
4	•	zero or more pseudo-classes
a.external:visited - a type selector, class selector and psuedo class

5	•	zero or more attribute selectors

[title]

button,
input[type="button"],
input[type="reset"],
input[type="submit"]
{
	background-color: #369;
	color: #fff;
	border: 2px solid;
	border-color: #69c #036 #036 #69c;
}


Note that [id="nav"] is not equivalent to #nav.

p[class~="literary"]	-- space separated eg <p class="somewhat literary sometimes">…</p>
td[headers~="price"]

[lang|="en"]					-- hyphen separated, <html lang="en-US">…</html>

a[href^="http:"]			-- starts with..
img[src$=".png"]			-- ends with..
input[name*="choice"] -- contains..

White space is the descendant combinator in CSS, so a [href] means a *[href], which is something quite different from a[href].


// align images to text
img.class-name { vertical-align: baseline; }
img.class-name { vertical-align: text-top; }
img.class-name { vertical-align: middle; }
img.class-name { vertical-align: text-bottom; }
img.class-name { vertical-align: 30% }
img.class-name { vertical-align: 2px }

  * { outline: 2px dotted red }
  * * { outline: 2px dotted green }
  * * * { outline: 2px dotted orange }
  * * * * { outline: 2px dotted blue }
  * * * * * { outline: 1px solid red }
  * * * * * * { outline: 1px solid green }
  * * * * * * * { outline: 1px solid orange }
  * * * * * * * * { outline: 1px solid blue }

REALLY, WTF!!!!!!!!!!

adding 1 word in bold, eg

	Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
	non proident, sunt in culpa qui officia deserunt mollit anim id est <span style="font-weight:bold;">laborum</span>.


COLUMNS
-------

given an image floated left with text that should sit to the right of it, setting 'overflow: hidden' on the text will stop it wrapping underneath the image

People often wonder why overflow: hidden results in floats being contained; if anything, they'd expect stuff to be hidden. Float containment is indeed just a side-effect – one that can be invoked by other properties as well (see below). What happens is that overflow: hidden makes the element establish a new block formatting context, or BFC. CSS 3 calls this a flow root. A BFC has several unique characteristics, as detailed in the sections below. The following property/value combinations will cause an element to establish a new BFC:

float: left and float: right
display: inline-block, display: inline-table, display: table-cell and display: table-caption
position: absolute and position: fixed
overflow: hidden, overflow: auto and overflow: scroll and their overflow-x and overflow-y counterparts.


NB. inline-block elements have whitespace inserted between them! You need to use the haml <
So the format of the html actually effects the rendering!

IMAGE IN CSS! RAILS ADDS ?TIMESTAMP TO END OF URL SO YOU HAVE TO PUT ?1 TO MAKE IT CACHE CORRECTLY


ATTRIBUTE SELECTORS ARE READY TO USE
------------------------------------

/* every img with an alt tag */
img[alt] {
    border: 1px solid #000;
    padding: 7px;
}

a[rel="home"] {
    background: url(home.png) no-repeat 0 0;
    padding: 0 0 0 20px;
}
<a href="http://emilylewisdesign.com" rel="home">Home</a>

img[alt~="website"] {
    border: 1px solid #000;
    padding: 7px;
}
<img src="ClientXYZ_Thumb.jpg" alt="Client XYZ website thumbnail" />

<ul role="navigation">
    <li><a href="/" rel="home">Home</a></li>
    <li><a href="/About/">About</a></li>
    ...
</ul>
ul[role="navigation"] {
    some pretty styles here;
}


input[type="submit][value="Search"] {
    now some sexy styles;
}


inline-block NEEDs a HACK on ie

*display:inline; zoom:1;


button elements are like input elements with type button but can have content

    <button type="submit" class="positive">
        <img src="/images/icons/tick.png" alt=""/>
        Save
    </button>

SO, it looks like BUTTON renders better than INPUT type='submit' but a button is no good without a form..



