RAILS
-----
http://articles.sitepoint.com/article/learn-ruby-on-rails
http://articles.sitepoint.com/article/rails-for-beginners/3

// crete a project   Rails 2
$ sudo rails demo
$ cd demo
$ sudo rake db:migrate    	-- create empty database
$ sudo script/generate rspec	-- create files needed for testing
$ ruby script/server
$ ruby script/console

// Create a project Rails 3
$ sudo rails new first_app
$ cd first_app/
$ mate Gemfile            // setup dependencies
$ sudo bundle install         // install dependencies
$ rails server            // run app
$ git init
$ git add .

$ heroku open

http://localhost:3000

// Lets create The Users resource
$ rails generate scaffold User name:string email:string 		// as id field is implicit
$ rake db:migrate
$ rails s														// shortcut for $rails server

// show rake db tasks
$ rake -T db

// show all rake Tasks
$ rake -T

$ rails generate scaffold Micropost content:string user_id:integer
$ rake db:migrate

$ rails console
first_user = User.first
first_user.microposts

$ git push heroku master
$ heroku rake db:migrate

// Optionally push our database content
$ [sudo] gem install taps
$ heroku db:push

http://railstutorial.org/chapters/static-pages#top

$ bundle install
$ rails generate rspec:install

// lets do some work on a new branch
git checkout -b static-pages

$ rails generate controller StaticPages home contact


  describe "GET 'home'" do						#just a label
    it "should be successful" do			#just another label!
      get 'home'											#get home
      response.should be_success			#server response should be http 200
    end
  end


// I think you need to have spork running in another terminal window
$ spork (cd to our project first, obviously)

then

$ rspec spec/
$ rspec spec/controllers/
$ rspec spec/controllers/pages_controller_spec.rb

OR

$ autotest



Model (ActiveRecord )
View ( ActionView )
Controller ( ActionController )

 The controllers subdirectory is where Rails looks to find controller classes. A controller handles a web request from the user.

 The views subdirectory holds the display templates to fill in with data from our application, convert to HTML, and return to the user's browser.

 The models subdirectory holds the classes that model and wrap the data stored in our application's database. In most frameworks, this part of the application can grow pretty messy, tedious, verbose, and error-prone. Rails makes it dead simple.

 The helpers subdirectory holds any helper classes used to assist the model, view, and controller classes. This helps to keep the model, view, and controller code small, focused, and uncluttered.

Need 3 databases
----------------
 library_development
 library_production
 library_test

database.yml

$ rake -T db  -- see all available Rake Tasks

'Story' objects are in 'stories' table
'Story.title' is a column in that table

// open a rails console so we can control and inspect our App
$ cd demo
$ ruby script/console

/* Static Pages */
-----------------------------------
http://localhost:3000/index.html

is in
/public/index.html

put your own static pages in public

/* Dynamic Pages */
-----------------------------------

Rails actions, which are a more powerful way to define URLs than static files.
Rails actions come bundled together inside controllers.

by default..
http://localhost:3000/controller/action

so
$ sudo script/generate controller Pages home contact	-- Pages controller, home & contact are optional actions

http://localhost:3000/pages/home
http://localhost:3000/pages/contact


/* Run Tests */
-----------------------------------

$ sudo script/generate rspec_controller Pages home contact

$ spec spec/
$ spec spec/controllers/
$ spec spec/controllers/pages_controller_spec.rb

$ /Users/shooley/Sites/rails/static/script/autospec


tail -f log/development.log

