You can use haml_tag too

def content_box
  haml_tag :div, :class => "holder" do
    haml_tag :div, :class => "top"
    haml_tag :div, :class => "content" do
      yield
    haml_tag :div, :class => "bottom"
  end
end
and in haml

%html
  %head
  %body
    Maybee some content here.
    = content_box do
      Content that goes in the content_box like news or stuff


NESTED LAYOUTS
--------------

<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end -%>
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= yield(:news_content) or yield %>
  <% end -%>
<% render :file => 'layouts/application' %>

-- then in application
  <%= yield :stylesheets %>


<% content_for :head do %>
  <%= GMap.header %>
  <%= @map.to_html %>
<% end %>

<%= yield :head %>


HELPER METHODS
--------------

booVolume {
  - 5.times do
    %div
      %img light.png

}

booHeader {
  -splitPane do
    -capture_haml {
      introPart
    }, capture_haml {
      detailPart
      }

}

def split_pane
  part1,part2 = *yield
  haml_tag :div do
    haml_tag(:div, :class=>'foo') do
       yield
     end
   end
end




HTML Example
<strong class="code" id="message">Hello, World!</strong>

Haml Example
%strong{:class => "code", :id => "message"} Hello, World!

• because class and id are so common
%strong.code#message Hello, World!

• because divs are so common
Haml
.content Hello, World!
HTML
<div class='content'>Hello, World!</div>

• self closing tags
%br/
%meta{'http-equiv' => 'Content-Type', :content => 'text/html'}/

• allegators eat whitespace
%blockquote<
  %div
    Foo!
is compiled to:

<blockquote><div>
  Foo!
</div></blockquote>

• HTML is valid
%p
  <div id="blah">Blah!</div>

• Attributes - terse
%html(xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en")

• Attributes - more complex
%script{:type => "text/javascript",
        :src  => "javascripts/script_#{2 + 7}"}


def hash1
  {:bread => 'white', :filling => 'peanut butter and jelly'}
end

def hash2
  {:bread => 'whole wheat'}
end

%sandwich{hash1, hash2, :delicious => true}/

would compile to:
<sandwich bread='whole wheat' delicious='true' filling='peanut butter and jelly' />


• class and id
%div#things
  %span#rice Chicken Fried
  %p.beans{ :food => 'true' } The magical fruit
  %h1.class.otherclass#id La La La
is compiled to:

<div id='things'>
  <span id='rice'>Chicken Fried</span>
  <p class='beans' food='true'>The magical fruit</p>
  <h1 class='class otherclass' id='id'>La La La</h1>
</div>


• Haml Comments: -#

• Running ruby - evaluated and inserted
 = ['hi', 'there', 'reader!'].join " "

• Running ruby - only evaluated
- foo = "hello"
- foo << " there"
- foo << " you!"
%p= foo

• Ruby blocks
- (42...47).each do |i|
  %p= i
%p See, I can count!


%p This is #{h quality} cake!
is the same as

%p= "This is the #{h quality} cake!"
and might compile to

<p>This is scrumptious cake!</p>



  #profilePic(style="-webkit-mask-box-image:url(../images/vignette-mask.png) 75 stretch;")


haml_tag('div', :class => outer_class) do
      haml_tag('div', :class => "#{inner_class} bgWhite roundedSmall inset spaceAfter") do
        yield
      end
    end

haml_concat link_to("Listen on audioboo.fm!", '${accessURL}')



/* An Example helper using haml concat */

module HamlburgerHelper
  def display_grid(objects, options={})
    options = {
      :table_class        => 'display_grid',
      :table_id           => "display_grid_#{objects.first.class.to_s.underscore.pluralize}",
      :heading_class      => 'display_grid_heading',
      :heading_id         => "display_grid_heading_#{objects.first.class.to_s.underscore.pluralize}",
      :th_class           => 'display_grid_th',
      :tr_class           => 'display_grid_tr',
      :td_class           => 'display_grid_td',
      :even_odd           => true,
      :format_date        => nil, #nil | lambda{|datetime|}
      :numeric_td_class   => 'numeric',
      :date_td_class      => 'date',
      :string_td_class    => 'string',

      :show_action        => nil, # lambda{|object| link_to '', my_path(object)}
      :edit_action        => nil, # lambda{|object|}
      :destroy_action     => nil, # lambda{|object|}

    }.merge(options)

    # if row_layout are provided use the names in the row_layout, otherwise find all the to_s attributes and select the keys
    columns = options[:row_layout] ? options[:row_layout] :
      objects.first.attributes.select{|k,v| v.respond_to?(:to_s)}.collect{|a| a[0]}

    show_action_links = options[:show_action] || options[:edit_action] || options[:destroy_action]

    capture_haml do
      haml_tag :table, {:id => options[:table_id], :class => options[:table_class]} do

        # Column headings
        haml_tag :tr, { :id => options[:heading_id], :class => [options[:heading_class], options[:tr_class]].join(' ') } do
          columns.each do |col|
            haml_tag :th, { :class => options[:td_class]} do
              haml_concat col.to_s.capitalize.humanize
            end
          end

          haml_tag :th, { :class => options[:td_class]} do
            haml_concat 'Actions'
          end if show_action_links
        end

        objects.each_with_index do |obj,idx|
          tr_classes = [ options[:tr_class] ]
          tr_classes << ((idx + 1).odd? ? 'odd' : 'even') if options[:even_odd]

          haml_tag :tr, { :id => "#{obj.class.to_s.underscore}_#{obj.id}", :class => tr_classes.join(' ')} do
            columns.each do |col|
              td_classes  = [options[:td_class], col]
              td_value    = obj.send(col)

              case td_value.class.to_s
              when "String"
                td_classes << options[:string_td_class]
              when "Numeric"
                td_classes << options[:numeric_td_class]
              when "Time", "Date", "DateTime","ActiveSupport::TimeWithZone"
                td_value = options[:format_date].call(td_value) if options[:format_date]
                td_classes << options[:date_td_class]
              end

              haml_tag :td, { :class => td_classes.join(' ')} do
                haml_concat td_value
              end
            end

            if show_action_links
              haml_tag :td, { :class => "#{options[:td_class]} actions" } do
                [:show_action, :edit_action, :destroy_action].each do |obj_action|
                  haml_concat options[obj_action].call(obj) if options[obj_action]
                end
              end
            end

          end
        end #end row capture
      end #end rows capture
    end #end table capture
  end #end def display_grid
end


capture_haml - haml to string via a new context
haml_concat - write to the buffer
haml_tag

so you can render a partial in a helper     - render :partial => 'subtotal', :locals => {:downloads => downloads, :date => date} - and concat it into a buffer
